Notes for this Netwjork/Tenda W268R-specific tree
---
A lot has been stripped to make the image fit, and many
things work differently:
- initramfs-only (no on-flash filesystem, nothing saved automatically)
  - a 64k mtd partition for storing config files as a .cpio.gz
- no passwords 
  - only public keys over ssh and direct shell over UART
- no users/groups 
- no LED control (other than the automatic switch LEDs)
- no usual failsafe
- no real buttons support except for a script that looks at the WPS
  button on boot and skips config restore if pressed -> this replaces failsafe
- no dropbearkey so all keys are pre-generated on the host
  -> see make-up-secrets.sh
- no netfilter so no NAT, firewalls, or such things

Current feature set is roughly:
- procd,netfid,uci,iw,dropbear (the usual gang, support for uci config and static ips)
- DHCP client (busybox udhcpcd) (support for proto dhcp)
- wifi client (wpa_supplicant) (and WDS works too so you can bridge it)
- ntp client (optionally server too, untested)

files-examples/ contains some examples for a WDS client bridge, an example
list of saved files and a upgrade-fw script that you can move to files/
once you've adapted them for your use

Recommended sequence of actions:
cp w268r_owrt_config .config
make menuconfig -> turn off the disable of config generation under base-files-tiny Configuration
install dropbear on the host if you dont have dropbearkey
./make-up-secrets.sh
test a build, get a serial + LAN link to the W268R and a TFTP server up, 
press 1 on boot to TFTP load the image to SDRAM (just temporarily boots that),
use "wifi config" to make up a wifi configuration (MAC address etc), look at them
and/or move important things to the files-examples/ versions, adjust stuff
and make a new build with the disable config generation on (if you like it a little bit smaller)
and your preferred config files included under files/
then reboot with TFTP ("reboot" and press 1 again) to that new firmware and see that
it comes up accessible by default (this is the "failsafe"/default configuration
which is just a temporary restore to defaults so you can regain access if you made a config oops)
then update-fw.sh the firmware actually into the device once you like to keep it

  _______                     ________        __
 |       |.-----.-----.-----.|  |  |  |.----.|  |_
 |   -   ||  _  |  -__|     ||  |  |  ||   _||   _|
 |_______||   __|_____|__|__||________||__|  |____|
          |__| W I R E L E S S   F R E E D O M
 -----------------------------------------------------

This is the buildsystem for the OpenWrt Linux distribution.

To build your own firmware you need a Linux, BSD or MacOSX system (case
sensitive filesystem required). Cygwin is unsupported because of the lack
of a case sensitive file system.

You need gcc, binutils, bzip2, flex, python, perl, make, find, grep, diff,
unzip, gawk, getopt, subversion, libz-dev and libc headers installed.

1. Run "./scripts/feeds update -a" to obtain all the latest package definitions
defined in feeds.conf / feeds.conf.default

2. Run "./scripts/feeds install -a" to install symlinks for all obtained
packages into package/feeds/

3. Run "make menuconfig" to select your preferred configuration for the
toolchain, target system & firmware packages.

4. Run "make" to build your firmware. This will download all sources, build
the cross-compile toolchain and then cross-compile the Linux kernel & all
chosen applications for your target system.

Sunshine!
	Your OpenWrt Community
	http://www.openwrt.org


