From 3e90f807e8e52a78093343b3b8716bd43dd00484 Mon Sep 17 00:00:00 2001
From: Alastair D'Silva <alastair@d-silva.org>
Date: Wed, 13 Mar 2019 13:00:27 +1100
Subject: [PATCH] Split KBUILD_VMLINUX_INIT

When building for PPC, the code from head_64.S should remain at the
start of the kernel, but LTO intermingles this with other symbols.

Since the code above refers to labels that are expected to be
relative to the start of the kernel (copy_to_here), the absolute
addresses generated by the assembler do not refer to the expected
code, and as a result, the platform fails to boot.

This patch splits KBUILD_VMLINUX_HEAD out of KBUILD_VMLINUX_INIT,
allowing LTO to be disabled for the head assembler files.

LTO is still usable for the rest of KBUILD_VMLINUX_INIT, as this
contains generic C code and no platform specific assembler.

Signed-off-by: Alastair D'Silva <alastair@d-silva.org>
---
 Documentation/kbuild/kbuild.txt |  9 +++++++-
 Makefile                        |  3 ++-
 scripts/link-vmlinux.sh         | 37 ++++++++++++++++++++++++++++-----
 3 files changed, 42 insertions(+), 7 deletions(-)

diff --git a/Documentation/kbuild/kbuild.txt b/Documentation/kbuild/kbuild.txt
index 82afdb7f0..cb9140069 100644
--- a/Documentation/kbuild/kbuild.txt
+++ b/Documentation/kbuild/kbuild.txt
@@ -219,10 +219,17 @@ KBUILD_LDS
 --------------------------------------------------
 The linker script with full path. Assigned by the top-level Makefile.
 
+KBUILD_VMLINUX_HEAD
+--------------------------------------------------
+All object files that must be at fixed addresses.
+Files specified with KBUILD_VMLINUX_HEAD are linked first, and not subject to
+link time optimization.
+
 KBUILD_VMLINUX_INIT
 --------------------------------------------------
 All object files for the init (first) part of vmlinux.
-Files specified with KBUILD_VMLINUX_INIT are linked first.
+Files specified with KBUILD_VMLINUX_INIT are linked after KBUILD_VMLINUX_HEAD,
+and are subject to link time optimization, if enabled.
 
 KBUILD_VMLINUX_MAIN
 --------------------------------------------------
diff --git a/Makefile b/Makefile
index 4b373daea..a8a265245 100644
--- a/Makefile
+++ b/Makefile
@@ -980,7 +980,8 @@ libs-y2		:= $(filter-out %.a, $(patsubst %/, %/built-in.o, $(libs-y)))
 virt-y		:= $(patsubst %/, %/built-in.o, $(virt-y))
 
 # Externally visible symbols (used by link-vmlinux.sh)
-export KBUILD_VMLINUX_INIT := $(head-y) $(init-y)
+export KBUILD_VMLINUX_HEAD := $(head-y)
+export KBUILD_VMLINUX_INIT := $(init-y)
 export KBUILD_VMLINUX_MAIN := $(core-y) $(libs-y2) $(drivers-y) $(net-y) $(virt-y)
 export KBUILD_VMLINUX_LIBS := $(libs-y1)
 export KBUILD_LDS          := arch/$(SRCARCH)/kernel/vmlinux.lds
diff --git a/scripts/link-vmlinux.sh b/scripts/link-vmlinux.sh
index 1b588cf9a..daed33bc2 100755
--- a/scripts/link-vmlinux.sh
+++ b/scripts/link-vmlinux.sh
@@ -71,14 +71,28 @@ modpost_link()
 	local objects
 
 	if [ -n "${CONFIG_THIN_ARCHIVES}" ]; then
-		objects="--whole-archive				\
+		objects="--whole-archive"
+
+		if [ -n "${CONFIG_LTO}" -a -z "${CONFIG_LTO_DISABLE}" ]; then
+			objects="$objects -fno-lto ${KBUILD_VMLINUX_HEAD} -flto"
+		else
+			objects="$objects ${KBUILD_VMLINUX_HEAD}"
+		fi
+
+		objects="$objects					\
 			built-in.o					\
 			--no-whole-archive				\
 			--start-group					\
 			${KBUILD_VMLINUX_LIBS}				\
 			--end-group"
 	else
-		objects="${KBUILD_VMLINUX_INIT}				\
+		if [ -n "${CONFIG_LTO}" -a -z "${CONFIG_LTO_DISABLE}" ]; then
+			objects="-fno-lto ${KBUILD_VMLINUX_HEAD} -flto"
+		else
+			objects="${KBUILD_VMLINUX_HEAD}"
+		fi
+
+		objects="$objects ${KBUILD_VMLINUX_INIT}		\
 			--start-group					\
 			${KBUILD_VMLINUX_MAIN}				\
 			${KBUILD_VMLINUX_LIBS}				\
@@ -97,15 +111,28 @@ vmlinux_link()
 
 	if [ "${SRCARCH}" != "um" ]; then
 		if [ -n "${CONFIG_THIN_ARCHIVES}" ]; then
-			objects="--whole-archive			\
-				built-in.o				\
+			objects="--whole-archive"
+
+			if [ -n "${CONFIG_LTO}" -a -z "${CONFIG_LTO_DISABLE}" ]; then
+				objects="$objects -fno-lto ${KBUILD_VMLINUX_HEAD} -flto"
+			else
+				objects="$objects ${KBUILD_VMLINUX_HEAD}"
+			fi
+
+			objects="$objects built-in.o			\
 				--no-whole-archive			\
 				--start-group				\
 				${KBUILD_VMLINUX_LIBS}			\
 				--end-group				\
 				${1}"
 		else
-			objects="${KBUILD_VMLINUX_INIT}			\
+			if [ -n "${CONFIG_LTO}" -a -z "${CONFIG_LTO_DISABLE}" ]; then
+				objects="-fno-lto ${KBUILD_VMLINUX_HEAD} -flto"
+			else
+				objects="${KBUILD_VMLINUX_HEAD}"
+			fi
+
+			objects="$objects ${KBUILD_VMLINUX_INIT}	\
 				--start-group				\
 				${KBUILD_VMLINUX_MAIN}			\
 				${KBUILD_VMLINUX_LIBS}			\
-- 
2.21.0

